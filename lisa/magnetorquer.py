import numpy as np

class Magnetorquer:
    def __init__(self, name, position, orientation, max_magnetic_moment, noise_std=0.001, bias=None):
        """
        Initialize the Magnetorquer with position, orientation, and error parameters.

        Parameters:
        - name (str): The name or ID of the magnetorquer.
        - position (list): Position of the magnetorquer in the satellite body frame [x, y, z].
        - orientation (list): Orientation of the magnetorquer in quaternion form [q0, q1, q2, q3].
        - max_magnetic_moment (float): Maximum magnetic moment generated by the magnetorquer (in Am²).
        - noise_std (float): Standard deviation of Gaussian noise added to the magnetic moment (in Am²).
        - bias (list): Constant bias error applied to the magnetic moment [Mx, My, Mz] (in Am²).
        """
        self.name = name
        self.position = np.array(position)
        self.orientation = np.array(orientation)
        self.max_magnetic_moment = max_magnetic_moment
        self.noise_std = noise_std
        self.bias = np.array(bias) if bias is not None else np.zeros(3)

    def apply_magnetic_moment(self, commanded_moment):
        """
        Apply a magnetic moment command to the magnetorquer with errors.

        Parameters:
        - commanded_moment (list): The commanded magnetic moment [Mx, My, Mz] in Am².

        Returns:
        - Actual magnetic moment after applying noise, bias, and limiting to maximum moment.
        """
        # Apply noise and bias to the commanded magnetic moment
        actual_moment = np.array(commanded_moment) + np.random.normal(0, self.noise_std, size=3) + self.bias
        
        # Limit the magnetic moment to the maximum allowed by the magnetorquer
        norm_moment = np.linalg.norm(actual_moment)
        if norm_moment > self.max_magnetic_moment:
            actual_moment = actual_moment * (self.max_magnetic_moment / norm_moment)
        
        return actual_moment
